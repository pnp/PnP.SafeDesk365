//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class SafeDesk365 {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    private bearerToken: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, bearerToken?:string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : http as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://safedesk365-pro.azurewebsites.net";
        this.bearerToken = bearerToken !== undefined && bearerToken !== null ? bearerToken : ""
    }

    /**
     * @param userEmail (optional) 
     * @param location (optional) 
     * @return Success
     */
    GetAllBookings(userEmail?: string | undefined, location?: string | undefined): Promise<Booking[]> {
        let url_ = this.baseUrl + "/api/bookings?";
        if (userEmail !== undefined || userEmail !== null)
            url_ += "userEmail=" + encodeURIComponent("" + userEmail) + "&";
        else if (location !== undefined || location !== null)
            url_ += "location=" + encodeURIComponent("" + location) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookingsAll(_response);
        });
    }

    protected processBookingsAll(response: Response): Promise<Booking[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Booking[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Booking[]>(null as any);
    }

    /**
     * @return Success
     */
    CreateSpecificBooking(body: Booking): Promise<number> {
        let url_ = this.baseUrl + "/api/bookings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookingsPOST(_response);
        });
    }

    protected processBookingsPOST(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @return Success
     */
    GetSingleBooking(id: number): Promise<Booking> {
        let url_ = this.baseUrl + "/api/bookings/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookingsGET(_response);
        });
    }

    protected processBookingsGET(response: Response): Promise<Booking> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Booking;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Booking>(null as any);
    }

    /**
     * @return Success
     */
    RemoveBooking(id: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/bookings/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBookingsDELETE(_response);
        });
    }

    protected processBookingsDELETE(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param userEmail (optional) 
     * @param location (optional) 
     * @return Success
     */
    GetUpcomingBookings(userEmail?: string | undefined, location?: string | undefined): Promise<Booking[]> {
        let url_ = this.baseUrl + "/api/bookings/upcoming?";
        if (userEmail !== undefined || userEmail !== null)
            url_ += "userEmail=" + encodeURIComponent("" + userEmail) + "&";
        if (location !== undefined || location !== null)
            url_ += "location=" + encodeURIComponent("" + location) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpcomingBookings(_response);
        });
    }

    protected processUpcomingBookings(response: Response): Promise<Booking[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Booking[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Booking[]>(null as any);
    }

    /**
     * Needs an ID retrieved from GetUpcomingdeskAvailabilities and a user's email 
     * @return Success
     */
    BookAvailability(id: number, userEmail: string): Promise<number> {
        let url_ = this.baseUrl + "/api/bookings/availability/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (userEmail === undefined || userEmail === null)
            throw new Error("The parameter 'userEmail' must be defined and cannot be null.");
        else
            url_ += "userEmail=" + encodeURIComponent("" + userEmail) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAvailability(_response);
        });
    }

    protected processAvailability(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @return Success
     */
    Checkin(id: number): Promise<Booking> {
        let url_ = this.baseUrl + "/api/bookings/checkin/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckin(_response);
        });
    }

    protected processCheckin(response: Response): Promise<Booking> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Booking;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Booking>(null as any);
    }

    /**
     * @return Success
     */
    Checkout(id: number): Promise<Booking> {
        let url_ = this.baseUrl + "/api/bookings/checkout/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckout(_response);
        });
    }

    protected processCheckout(response: Response): Promise<Booking> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Booking;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Booking>(null as any);
    }

    /**
     * @param selectedDate (optional) 
     * @param location (optional) 
     * @return Success
     */
    GetUpcomingdeskAvailabilities(selectedDate?: string | undefined, location?: string | undefined): Promise<DeskAvailability[]> {
        let url_ = this.baseUrl + "/api/deskAvailabilities/upcoming?";
        //if (selectedDate === null)
        //    throw new Error("The parameter 'selectedDate' cannot be null.");
        if (selectedDate !== null || selectedDate !== undefined)
            url_ += "selectedDate=" + encodeURIComponent("" + selectedDate) + "&";
        //if (location === null)
          //  throw new Error("The parameter 'location' cannot be null.");
        if (location !== null && location !== undefined)
            url_ += "location=" + encodeURIComponent("" + location) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpcomingdeskAvailabilities(_response);
        });
    }

    protected processUpcomingdeskAvailabilities(response: Response): Promise<DeskAvailability[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as DeskAvailability[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DeskAvailability[]>(null as any);
    }

    /**
     * @return Success
     */
     CreateUpcomingdeskAvailabilities(from: string, to: string): Promise<void> {
        let url_ = this.baseUrl + "/api/deskAvailabilities/upcoming?";
        if (from === undefined || from === null)
            throw new Error("The parameter 'from' must be defined and cannot be null.");
        else
            url_ += "from=" + encodeURIComponent("" + from) + "&";
        if (to === undefined || to === null)
            throw new Error("The parameter 'to' must be defined and cannot be null.");
        else
            url_ += "to=" + encodeURIComponent("" + to) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUpcomingdeskAvailabilities(_response);
        });
    }

    protected processCreateUpcomingdeskAvailabilities(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    GetDesks(): Promise<Desk[]> {
        let url_ = this.baseUrl + "/api/desks";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesks(_response);
        });
    }

    protected processDesks(response: Response): Promise<Desk[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Desk[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Desk[]>(null as any);
    }

    /**
     * @return Success
     */
    GetDeskByLocationName(location: string): Promise<Desk[]> {
        let url_ = this.baseUrl + "/api/desks/location/{location}";
        if (location === undefined || location === null)
            throw new Error("The parameter 'location' must be defined.");
        url_ = url_.replace("{location}", encodeURIComponent("" + location));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLocation(_response);
        });
    }

    protected processLocation(response: Response): Promise<Desk[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Desk[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Desk[]>(null as any);
    }

    /**
     * @return Success
     */
    GetFacilities(): Promise<Facility[]> {
        let url_ = this.baseUrl + "/api/facilities";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFacilities(_response);
        });
    }

    protected processFacilities(response: Response): Promise<Facility[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Facility[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Facility[]>(null as any);
    }

    /**
     * @return Success
     */
    GetLocations(): Promise<Location[]> {
        let url_ = this.baseUrl + "/api/locations";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": "bearer " + this.bearerToken,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLocations(_response);
        });
    }

    protected processLocations(response: Response): Promise<Location[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Location[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Location[]>(null as any);
    }
}

export interface Booking {
    id?: number;
    title?: string | undefined;
    user?: string | undefined;
    deskCode?: string | undefined;
    date?: string;
    timeSlot?: string | undefined;
    checkInTime?: string;
    checkOutTime?: string;
    location?: string | undefined;
}

export interface Desk {
    id?: number;
    code?: string | undefined;
    description?: string | undefined;
    coffeeMachineDistance?: number;
    location?: string | undefined;
    picture?: string | undefined;
    facilities?: string | undefined;
}

export interface DeskAvailability {
    id?: number;
    title?: string | undefined;
    code?: string | undefined;
    description?: string | undefined;
    coffeeMachineDistance?: number;
    location?: string | undefined;
    picture?: string | undefined;
    facilities?: string | undefined;
    date?: string;
    timeSlot?: string | undefined;
}

export interface Facility {
    id?: number;
    name?: string | undefined;
}

export interface Location {
    id?: number;
    name?: string | undefined;
    address?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}